1. Quick Sort:

#include <stdio.h>
void Swap(int *x, int *y) {
    int Temp;
    Temp = *x;
    *x = *y;
    *y = Temp;
}
void quickSort(int a[], int first, int last) {
    int pivot, i, j;
    if(first < last) {
        pivot = first;
        i = first;
        j = last;
        while (i < j) {
            while(a[i] <= a[pivot] && i < last)
                i++;
            while(a[j] > a[pivot])
                j--;
            if(i < j) {
                Swap(&a[i], &a[j]);
            }
        }
        Swap(&a[pivot], &a[j]);
        quickSort(a, first, j - 1);
        quickSort(a, j + 1, last);
    }
}
int main() {
    int a[100], number, i;
    printf("\n Please Enter the total Number of Elements  :  ");
    scanf("%d", &number);
    printf("\n Please Enter the Array Elements  :  ");
    for(i = 0; i < number; i++)
        scanf("%d", &a[i]);

    quickSort(a, 0, number - 1);
    printf("\n Quick Sort Result : ");
    for(i = 0; i < number; i++)  {
        printf(" %d \t", a[i]);
    }
    printf("\n");
    return 0;
}
********************************************************************

2. Merge sort:

#include <iostream>

using namespace std;

// A function to merge the two half into a sorted data.
void Merge(int *a, int low, int high, int mid)
{
        // We have low to mid and mid+1 to high already sorted.
        int i, j, k, temp[high-low+1];
        i = low;
        k = 0;
        j = mid + 1;

        // Merge the two parts into temp[].
        while (i <= mid && j <= high)
        {
                if (a[i] < a[j])
                {
                        temp[k] = a[i];
                        k++;
                        i++;
                }
                else
                {
                        temp[k] = a[j];
                        k++;
                        j++;
                }
        }

        // Insert all the remaining values from i to mid into temp[].
        while (i <= mid)
        {
                temp[k] = a[i];
                k++;
                i++;
        }

        // Insert all the remaining values from j to high into temp[].
        while (j <= high)
        {
                temp[k] = a[j];
                k++;
                j++;
        }


        // Assign sorted data stored in temp[] to a[].
        for (i = low; i <= high; i++)
        {
                a[i] = temp[i-low];
        }
}

// A function to split array into two parts.
void MergeSort(int *a, int low, int high)
{
        int mid;
        if (low < high)
        {
                mid=(low+high)/2;
                // Split the data into two half.
                MergeSort(a, low, mid);
                MergeSort(a, mid+1, high);

                // Merge them to get sorted output.
                Merge(a, low, high, mid);
        }
}

int main()
{
        int n, i;
        cout<<"\nEnter the number of data element to be sorted: ";
        cin>>n;

        int arr[n];
        for(i = 0; i < n; i++)
        {
                cout<<"Enter element "<<i+1<<": ";
                cin>>arr[i];
        }

        MergeSort(arr, 0, n-1);

        // Printing the sorted data.
        cout<<"\nSorted Data ";
        for (i = 0; i < n; i++)
        cout<<"->"<<arr[i];

        return 0;
}
*********************************************************************

3. Knapsack

#include <bits/stdc++.h>
using namespace std;
void knapSack(int W, int wt[], int val[], int n)
{
    int dp[n + 1][W + 1];
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= W; j++)
        {
            if (i == 0 || j == 0)
            {
                dp[i][j] = 0;
            }
            else if (wt[i - 1] <= j)
            {
                dp[i][j] = max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);
            }
            else
            {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= W; j++)
            cout << dp[i][j] << " ";
        cout << endl;
    }
    int i=n,j=W;
    while(i>0&&j>0)
    {
    if(dp[i][j]==dp[i-1][j])
    {
        printf("OBJECT %d = 0\n",i--);
    }
    else
    {
        printf("OBJECT %d = 1\n",i--);
        j=j-wt[i];
    }
    }
    cout<<"the total profit is  "<<dp[n][W];
}
int main()
{
    int val[10],wt[10],n,W;
    cout<<"Enter number of objects and cap:\t";
    cin>>n>>W;
    cout<<"Enter value and weight for each:\n";
    for(int i=0;i<n;i++)
        cin>>val[i]>>wt[i];
    knapSack(W, wt, val, n);
    
    return 0;
}
**************************************************************************

4.Mincoin

#include<iostream>
#include<bits/stdc++.h>

using namespace std;

int i,j;
int minCoins(int max,int coins[],int n ) {
        vector<vector<int>> T(n , vector<int>(max+1));
        for(i=0;i<n;i++) {
                for(j=0;j<=max;j++) {
                        if(coins[i]==1)
                                T[i][j]=j;
                        else if(j>=coins[i])
                                T[i][j]=min( 1+T[i][j-coins[i]],T[i-1][j] );
                        else
                                T[i][j]=T[i-1][j];
                }
        }
         for(i=0;i<n;i++) {
                for(j=0;j<=max;j++) {
                        cout<<T[i][j]<<"\t";
                }
                cout<<endl;
         }
         return T[n-1][max];

}

int main() {
        int max=11;
        int n=4;
        int coins[]={9,6,5,1};
        sort(coins,coins+n);
        cout<<minCoins(max,coins,n)<<endl;
return 0;
}
*****************************************************************************

5. nqueen

#include<iostream>
#include<math.h>
using namespace std;
void nqueens(int);
int place(int[],int);
void printsolution(int,int[]);
int main()
{
int n;
cout<<"Enter the no.of queens:";
cin>>n;
nqueens(n);
}
void nqueens(int n)
{
int x[10],count=0,k=1;
x[k]=0;
while(k!=0)
{
x[k]=x[k]+1;
while(x[k]<=n&&(!place(x,k)))
x[k]=x[k]+1;
if(x[k]<=n)
{
if(k==n)
{
count++;
cout<<"\nSolution"<<count<<"\n";
printsolution(n,x);
}
else
{
k++;
x[k]=0;
}
}
else
{
k--;
}
}
}
int place(int x[],int k)
{
int i;
for(i=1;i<k;i++)
if(x[i]==x[k]||(abs(x[i]-x[k]))==abs(i-k))
return 0;
return 1;
}
void printsolution(int n,int x[])
{
int i,j;
char c[10][10];
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
c[i][j]='X';
}
for(i=1;i<=n;i++)
c[i][x[i]]='Q';
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
cout<<c[i][j]<<"\t";
}
cout<<"\n";
}
}
*****************************************************************************************

6. TSP

#include<stdio.h>
int a[10][10],n,visit[10];
int cost_opt=0,cost_apr=0;
int least_apr(int c);
int least_opt(int c);

void mincost_opt(int city)
{
            int i,ncity;
            visit[city]=1;
            printf("%d-->",city);
            ncity=least_opt(city);
            if(ncity==999)
            {
                        ncity=1;
                        printf("%d",ncity);
                        cost_opt+=a[city][ncity];
                        return;
            }
            mincost_opt(ncity);
}
 void mincost_apr(int city)
 {
            int i,ncity;
            visit[city]=1;
            printf("%d-->",city);
            ncity=least_apr(city);
            if(ncity==999)
            {
                        ncity=1;
                        printf("%d",ncity);
                        cost_apr+=a[city][ncity];
                        return;
            }
            mincost_apr(ncity);
}

int least_opt(int c)
{
            int i,nc=999;
            int min=999,kmin=999;
            for(i=1;i<=n;i++)
            {
                        if((a[c][i]!=0)&&(visit[i]==0))
                        if(a[c][i]<min)
                        {
                                    min=a[i][1]+a[c][i];
                                    kmin=a[c][i];
                                    nc=i;
                        }
            }
            if(min!=999)
                        cost_opt+=kmin;
            return nc;
}

int least_apr(int c)
{
            int i,nc=999;
            int min=999,kmin=999;
for(i=1;i<=n;i++)
            {
                        if((a[c][i]!=0)&&(visit[i]==0))
                                    if(a[c][i]<kmin)
                                    {
                                                min=a[i][1]+a[c][i];
                                                kmin=a[c][i];
                                                nc=i;
                                    }
            }
            if(min!=999)
                        cost_apr+=kmin;
            return nc;
}
 int main()
{
            int i,j;
            printf("Enter No. of cities:\n");
            scanf("%d",&n);

            printf("Enter the cost matrix\n");
            for(i=1;i<=n;i++)
            {
                        printf("Enter elements of row:%d\n",i );
                        for(j=1;j<=n;j++)
                                    scanf("%d",&a[i][j]);
                        visit[i]=0;
            }
            printf("The cost list is \n");
            for(i=1;i<=n;i++)
            {
                        printf("\n\n");
                        for(j=1;j<=n;j++)
                                    printf("\t%d",a[i][j]);
            }
            printf("\n\n Optimal Solution :\n");
            printf("\n The path is :\n");
            mincost_opt(1);
            printf("\n Minimum cost:");
            printf("%d",cost_opt);

            printf("\n\n Approximated Solution :\n");
            for(i=1;i<=n;i++)
                        visit[i]=0;
            printf("\n  The path is :\n");
            mincost_apr(1);
            printf("\nMinimum cost:");
            printf("%d",cost_apr);
            printf("\n\nError in approximation is approximated solution/optimal solution=%f",
                        (float)cost_apr/cost_opt);
}
********************************************************************************************************

7.A BFS:

#include<iostream>
using namespace std;
int visited[10];
void bfs(int n,int a[10][10],int source)
{
int i,q[10],u,front=1,rear=1;
visited[source]=1;
q[rear]=source;
while(front<=rear)
{
u=q[front];
front++;
for(i=1;i<=n;i++)
if(a[u][i]==1 && visited[i]==0)
{
rear++;
q[rear]=i;
visited[i]=1;
}
}
}
int main()
{
int n,a[10][10],i,j,source;
cout<<"Enter the number of nodes : ";
cin>>n;
cout<<"Enter the adjacency matrix :\n";
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
cin>>a[i][j];
cout<<"Enter the source : ";
cin>>source;
for(i=1;i<=n;i++)
visited[i]=0;
bfs(n,a,source);
for(i=1;i<=n;i++)
{
if(visited[i]==0)
cout<<"The node "<<i<<" is NOT reachable.\n";
else
cout<<"The node "<<i<<" is reachable.\n";
}
return 0;
}
**********************************************************************************

7.B DFS

#include<stdio.h>
int visit[20],n,adj[20][20],s,count=0;

void dfs(int v)
{
  int w;
  visit[v]=1;
  count++;
  for(w=1;w<=n;w++)

    if((adj[v][w]==1) && (visit[w]==0))
      dfs(w);
}




void main()
{
  int v,w;
  printf("Enter the no.of vertices:");
  scanf("%d",&n);

  printf("Enter the adjacency matrix:\n");
  for(v=1;v<=n;v++)
    for(w=1;w<=n;w++)
      scanf("%d",&adj[v][w]);

  for(v=1;v<=n;v++)
      visit[v]=0;

    dfs(1);

  if(count==n)
   printf("\nThe graph is connected");
  else
   printf("The graph is not connected");
}
*****************************************************************************************

8.Dijsktras

#include<stdio.h>
#define infinity 999
void dij(int n, int v,int cost[20][20], int dist[]){
int i,u,count,w,flag[20],min;
for(i=1;i<=n;i++)
flag[i]=0, dist[i]=cost[v][i];
count=2;
while(count<=n){
min=99;
for(w=1;w<=n;w++)
if(dist[w]<min && !flag[w]) {
min=dist[w];
u=w;
}
flag[u]=1;
count++;
for(w=1;w<=n;w++)
if((dist[u]+cost[u][w]<dist[w]) && !flag[w])
dist[w]=dist[u]+cost[u][w];
}
}
int main(){
int n,v,i,j,cost[20][20],dist[20];
printf("enter the number of nodes:");
scanf("%d",&n);
printf("\n enter the cost matrix:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++){
scanf("%d",&cost[i][j]);
if(cost[i][j] == 0)
cost[i][j]=infinity;
}
printf("\n enter the source matrix:");
scanf("%d",&v);
dij(n,v,cost,dist);
printf("\n shortest path : \n");
for(i=1;i<=n;i++)
if(i!=v)
printf("%d->%d,cost=%d\n",v,i,dist[i]);
}
***************************************************************************************